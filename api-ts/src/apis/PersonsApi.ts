/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityName,
  EntityNameWithId,
  HTTPValidationError,
  PersonOutput,
  PostalAddress,
  PostalAddressWithId,
  TelecommunicationAddress,
  TelecommunicationAddressWithId,
} from '../models/index';
import {
    EntityNameFromJSON,
    EntityNameToJSON,
    EntityNameWithIdFromJSON,
    EntityNameWithIdToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PersonOutputFromJSON,
    PersonOutputToJSON,
    PostalAddressFromJSON,
    PostalAddressToJSON,
    PostalAddressWithIdFromJSON,
    PostalAddressWithIdToJSON,
    TelecommunicationAddressFromJSON,
    TelecommunicationAddressToJSON,
    TelecommunicationAddressWithIdFromJSON,
    TelecommunicationAddressWithIdToJSON,
} from '../models/index';

export interface CreatePersonsPersonIdNamesPostRequest {
    personId: string;
    entityName: EntityName;
}

export interface CreatePersonsPersonIdPostalAddressesPostRequest {
    personId: string;
    postalAddress: PostalAddress;
}

export interface CreatePersonsPersonIdTelecommunicationAddressesPostRequest {
    personId: string;
    telecommunicationAddress: TelecommunicationAddress;
}

export interface IndexPersonsPersonIdNamesGetRequest {
    personId: string;
}

export interface IndexPersonsPersonIdPostalAddressesGetRequest {
    personId: string;
}

export interface IndexPersonsPersonIdTelecommunicationAddressesGetRequest {
    personId: string;
}

export interface ShowPersonsPersonIdGetRequest {
    personId: string;
}

/**
 * 
 */
export class PersonsApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async createPersonsPersonIdNamesPostRaw(requestParameters: CreatePersonsPersonIdNamesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityNameWithId>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling createPersonsPersonIdNamesPost().'
            );
        }

        if (requestParameters['entityName'] == null) {
            throw new runtime.RequiredError(
                'entityName',
                'Required parameter "entityName" was null or undefined when calling createPersonsPersonIdNamesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/names`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityNameToJSON(requestParameters['entityName']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityNameWithIdFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createPersonsPersonIdNamesPost(requestParameters: CreatePersonsPersonIdNamesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityNameWithId> {
        const response = await this.createPersonsPersonIdNamesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async createPersonsPersonIdPostalAddressesPostRaw(requestParameters: CreatePersonsPersonIdPostalAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostalAddress>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling createPersonsPersonIdPostalAddressesPost().'
            );
        }

        if (requestParameters['postalAddress'] == null) {
            throw new runtime.RequiredError(
                'postalAddress',
                'Required parameter "postalAddress" was null or undefined when calling createPersonsPersonIdPostalAddressesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/postal_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostalAddressToJSON(requestParameters['postalAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostalAddressFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createPersonsPersonIdPostalAddressesPost(requestParameters: CreatePersonsPersonIdPostalAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostalAddress> {
        const response = await this.createPersonsPersonIdPostalAddressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async createPersonsPersonIdTelecommunicationAddressesPostRaw(requestParameters: CreatePersonsPersonIdTelecommunicationAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelecommunicationAddress>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling createPersonsPersonIdTelecommunicationAddressesPost().'
            );
        }

        if (requestParameters['telecommunicationAddress'] == null) {
            throw new runtime.RequiredError(
                'telecommunicationAddress',
                'Required parameter "telecommunicationAddress" was null or undefined when calling createPersonsPersonIdTelecommunicationAddressesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/telecommunication_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TelecommunicationAddressToJSON(requestParameters['telecommunicationAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelecommunicationAddressFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createPersonsPersonIdTelecommunicationAddressesPost(requestParameters: CreatePersonsPersonIdTelecommunicationAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelecommunicationAddress> {
        const response = await this.createPersonsPersonIdTelecommunicationAddressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexPersonsPersonIdNamesGetRaw(requestParameters: IndexPersonsPersonIdNamesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EntityNameWithId>>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling indexPersonsPersonIdNamesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/names`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntityNameWithIdFromJSON));
    }

    /**
     * Index
     */
    async indexPersonsPersonIdNamesGet(requestParameters: IndexPersonsPersonIdNamesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EntityNameWithId>> {
        const response = await this.indexPersonsPersonIdNamesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexPersonsPersonIdPostalAddressesGetRaw(requestParameters: IndexPersonsPersonIdPostalAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostalAddressWithId>>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling indexPersonsPersonIdPostalAddressesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/postal_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostalAddressWithIdFromJSON));
    }

    /**
     * Index
     */
    async indexPersonsPersonIdPostalAddressesGet(requestParameters: IndexPersonsPersonIdPostalAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostalAddressWithId>> {
        const response = await this.indexPersonsPersonIdPostalAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexPersonsPersonIdTelecommunicationAddressesGetRaw(requestParameters: IndexPersonsPersonIdTelecommunicationAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TelecommunicationAddressWithId>>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling indexPersonsPersonIdTelecommunicationAddressesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/telecommunication_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TelecommunicationAddressWithIdFromJSON));
    }

    /**
     * Index
     */
    async indexPersonsPersonIdTelecommunicationAddressesGet(requestParameters: IndexPersonsPersonIdTelecommunicationAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TelecommunicationAddressWithId>> {
        const response = await this.indexPersonsPersonIdTelecommunicationAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show
     */
    async showPersonsPersonIdGetRaw(requestParameters: ShowPersonsPersonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonOutput>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling showPersonsPersonIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonOutputFromJSON(jsonValue));
    }

    /**
     * Show
     */
    async showPersonsPersonIdGet(requestParameters: ShowPersonsPersonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonOutput> {
        const response = await this.showPersonsPersonIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
