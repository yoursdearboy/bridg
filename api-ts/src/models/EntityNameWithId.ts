/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityNameWithId
 */
export interface EntityNameWithId {
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    use?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    family?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    given?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    middle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    patronymic?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    prefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EntityNameWithId
     */
    suffix?: string | null;
}

/**
 * Check if a given object implements the EntityNameWithId interface.
 */
export function instanceOfEntityNameWithId(value: object): value is EntityNameWithId {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function EntityNameWithIdFromJSON(json: any): EntityNameWithId {
    return EntityNameWithIdFromJSONTyped(json, false);
}

export function EntityNameWithIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityNameWithId {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'use': json['use'] == null ? undefined : json['use'],
        'family': json['family'] == null ? undefined : json['family'],
        'given': json['given'] == null ? undefined : json['given'],
        'middle': json['middle'] == null ? undefined : json['middle'],
        'patronymic': json['patronymic'] == null ? undefined : json['patronymic'],
        'prefix': json['prefix'] == null ? undefined : json['prefix'],
        'suffix': json['suffix'] == null ? undefined : json['suffix'],
    };
}

export function EntityNameWithIdToJSON(json: any): EntityNameWithId {
    return EntityNameWithIdToJSONTyped(json, false);
}

export function EntityNameWithIdToJSONTyped(value?: EntityNameWithId | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'use': value['use'],
        'family': value['family'],
        'given': value['given'],
        'middle': value['middle'],
        'patronymic': value['patronymic'],
        'prefix': value['prefix'],
        'suffix': value['suffix'],
    };
}

