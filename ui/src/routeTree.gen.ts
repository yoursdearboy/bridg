/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PersonsPersonIdRouteImport } from './routes/persons/$personId'
import { Route as PersonsPersonIdIndexRouteImport } from './routes/persons/$personId/index'
import { Route as PersonsPersonIdEditRouteImport } from './routes/persons/$personId/edit'
import { Route as SpacesSpaceIdSubjectsRouteRouteImport } from './routes/spaces/$spaceId/subjects/route'
import { Route as SpacesSpaceIdSubjectsIndexRouteImport } from './routes/spaces/$spaceId/subjects/index'
import { Route as SpacesSpaceIdSubjectsNewRouteImport } from './routes/spaces/$spaceId/subjects/new'
import { Route as SpacesSpaceIdSubjectsSubjectIdRouteImport } from './routes/spaces/$spaceId/subjects/$subjectId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonsPersonIdRoute = PersonsPersonIdRouteImport.update({
  id: '/persons/$personId',
  path: '/persons/$personId',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonsPersonIdIndexRoute = PersonsPersonIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PersonsPersonIdRoute,
} as any)
const PersonsPersonIdEditRoute = PersonsPersonIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PersonsPersonIdRoute,
} as any)
const SpacesSpaceIdSubjectsRouteRoute =
  SpacesSpaceIdSubjectsRouteRouteImport.update({
    id: '/spaces/$spaceId/subjects',
    path: '/spaces/$spaceId/subjects',
    getParentRoute: () => rootRouteImport,
  } as any)
const SpacesSpaceIdSubjectsIndexRoute =
  SpacesSpaceIdSubjectsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => SpacesSpaceIdSubjectsRouteRoute,
  } as any)
const SpacesSpaceIdSubjectsNewRoute =
  SpacesSpaceIdSubjectsNewRouteImport.update({
    id: '/new',
    path: '/new',
    getParentRoute: () => SpacesSpaceIdSubjectsRouteRoute,
  } as any)
const SpacesSpaceIdSubjectsSubjectIdRoute =
  SpacesSpaceIdSubjectsSubjectIdRouteImport.update({
    id: '/$subjectId',
    path: '/$subjectId',
    getParentRoute: () => SpacesSpaceIdSubjectsRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/persons/$personId': typeof PersonsPersonIdRouteWithChildren
  '/spaces/$spaceId/subjects': typeof SpacesSpaceIdSubjectsRouteRouteWithChildren
  '/persons/$personId/edit': typeof PersonsPersonIdEditRoute
  '/persons/$personId/': typeof PersonsPersonIdIndexRoute
  '/spaces/$spaceId/subjects/$subjectId': typeof SpacesSpaceIdSubjectsSubjectIdRoute
  '/spaces/$spaceId/subjects/new': typeof SpacesSpaceIdSubjectsNewRoute
  '/spaces/$spaceId/subjects/': typeof SpacesSpaceIdSubjectsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/persons/$personId/edit': typeof PersonsPersonIdEditRoute
  '/persons/$personId': typeof PersonsPersonIdIndexRoute
  '/spaces/$spaceId/subjects/$subjectId': typeof SpacesSpaceIdSubjectsSubjectIdRoute
  '/spaces/$spaceId/subjects/new': typeof SpacesSpaceIdSubjectsNewRoute
  '/spaces/$spaceId/subjects': typeof SpacesSpaceIdSubjectsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/persons/$personId': typeof PersonsPersonIdRouteWithChildren
  '/spaces/$spaceId/subjects': typeof SpacesSpaceIdSubjectsRouteRouteWithChildren
  '/persons/$personId/edit': typeof PersonsPersonIdEditRoute
  '/persons/$personId/': typeof PersonsPersonIdIndexRoute
  '/spaces/$spaceId/subjects/$subjectId': typeof SpacesSpaceIdSubjectsSubjectIdRoute
  '/spaces/$spaceId/subjects/new': typeof SpacesSpaceIdSubjectsNewRoute
  '/spaces/$spaceId/subjects/': typeof SpacesSpaceIdSubjectsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/persons/$personId'
    | '/spaces/$spaceId/subjects'
    | '/persons/$personId/edit'
    | '/persons/$personId/'
    | '/spaces/$spaceId/subjects/$subjectId'
    | '/spaces/$spaceId/subjects/new'
    | '/spaces/$spaceId/subjects/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/persons/$personId/edit'
    | '/persons/$personId'
    | '/spaces/$spaceId/subjects/$subjectId'
    | '/spaces/$spaceId/subjects/new'
    | '/spaces/$spaceId/subjects'
  id:
    | '__root__'
    | '/'
    | '/persons/$personId'
    | '/spaces/$spaceId/subjects'
    | '/persons/$personId/edit'
    | '/persons/$personId/'
    | '/spaces/$spaceId/subjects/$subjectId'
    | '/spaces/$spaceId/subjects/new'
    | '/spaces/$spaceId/subjects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PersonsPersonIdRoute: typeof PersonsPersonIdRouteWithChildren
  SpacesSpaceIdSubjectsRouteRoute: typeof SpacesSpaceIdSubjectsRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/persons/$personId': {
      id: '/persons/$personId'
      path: '/persons/$personId'
      fullPath: '/persons/$personId'
      preLoaderRoute: typeof PersonsPersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/persons/$personId/': {
      id: '/persons/$personId/'
      path: '/'
      fullPath: '/persons/$personId/'
      preLoaderRoute: typeof PersonsPersonIdIndexRouteImport
      parentRoute: typeof PersonsPersonIdRoute
    }
    '/persons/$personId/edit': {
      id: '/persons/$personId/edit'
      path: '/edit'
      fullPath: '/persons/$personId/edit'
      preLoaderRoute: typeof PersonsPersonIdEditRouteImport
      parentRoute: typeof PersonsPersonIdRoute
    }
    '/spaces/$spaceId/subjects': {
      id: '/spaces/$spaceId/subjects'
      path: '/spaces/$spaceId/subjects'
      fullPath: '/spaces/$spaceId/subjects'
      preLoaderRoute: typeof SpacesSpaceIdSubjectsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spaces/$spaceId/subjects/': {
      id: '/spaces/$spaceId/subjects/'
      path: '/'
      fullPath: '/spaces/$spaceId/subjects/'
      preLoaderRoute: typeof SpacesSpaceIdSubjectsIndexRouteImport
      parentRoute: typeof SpacesSpaceIdSubjectsRouteRoute
    }
    '/spaces/$spaceId/subjects/new': {
      id: '/spaces/$spaceId/subjects/new'
      path: '/new'
      fullPath: '/spaces/$spaceId/subjects/new'
      preLoaderRoute: typeof SpacesSpaceIdSubjectsNewRouteImport
      parentRoute: typeof SpacesSpaceIdSubjectsRouteRoute
    }
    '/spaces/$spaceId/subjects/$subjectId': {
      id: '/spaces/$spaceId/subjects/$subjectId'
      path: '/$subjectId'
      fullPath: '/spaces/$spaceId/subjects/$subjectId'
      preLoaderRoute: typeof SpacesSpaceIdSubjectsSubjectIdRouteImport
      parentRoute: typeof SpacesSpaceIdSubjectsRouteRoute
    }
  }
}

interface PersonsPersonIdRouteChildren {
  PersonsPersonIdEditRoute: typeof PersonsPersonIdEditRoute
  PersonsPersonIdIndexRoute: typeof PersonsPersonIdIndexRoute
}

const PersonsPersonIdRouteChildren: PersonsPersonIdRouteChildren = {
  PersonsPersonIdEditRoute: PersonsPersonIdEditRoute,
  PersonsPersonIdIndexRoute: PersonsPersonIdIndexRoute,
}

const PersonsPersonIdRouteWithChildren = PersonsPersonIdRoute._addFileChildren(
  PersonsPersonIdRouteChildren,
)

interface SpacesSpaceIdSubjectsRouteRouteChildren {
  SpacesSpaceIdSubjectsSubjectIdRoute: typeof SpacesSpaceIdSubjectsSubjectIdRoute
  SpacesSpaceIdSubjectsNewRoute: typeof SpacesSpaceIdSubjectsNewRoute
  SpacesSpaceIdSubjectsIndexRoute: typeof SpacesSpaceIdSubjectsIndexRoute
}

const SpacesSpaceIdSubjectsRouteRouteChildren: SpacesSpaceIdSubjectsRouteRouteChildren =
  {
    SpacesSpaceIdSubjectsSubjectIdRoute: SpacesSpaceIdSubjectsSubjectIdRoute,
    SpacesSpaceIdSubjectsNewRoute: SpacesSpaceIdSubjectsNewRoute,
    SpacesSpaceIdSubjectsIndexRoute: SpacesSpaceIdSubjectsIndexRoute,
  }

const SpacesSpaceIdSubjectsRouteRouteWithChildren =
  SpacesSpaceIdSubjectsRouteRoute._addFileChildren(
    SpacesSpaceIdSubjectsRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PersonsPersonIdRoute: PersonsPersonIdRouteWithChildren,
  SpacesSpaceIdSubjectsRouteRoute: SpacesSpaceIdSubjectsRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
