/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PerformedObservation,
  PerformedObservationResult,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PerformedObservationFromJSON,
    PerformedObservationToJSON,
    PerformedObservationResultFromJSON,
    PerformedObservationResultToJSON,
} from '../models/index';

export interface IndexSpacesSpaceIdSubjectsSubjectIdObservationGetRequest {
    spaceId: string;
    subjectId: string;
}

export interface IndexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGetRequest {
    spaceId: string;
    subjectId: string;
    obsId: string;
}

export interface ShowSpacesSpaceIdSubjectsSubjectIdObservationObsIdGetRequest {
    spaceId: string;
    subjectId: string;
    obsId: string;
}

/**
 * 
 */
export class ObservationApi extends runtime.BaseAPI {

    /**
     * Index
     */
    async indexSpacesSpaceIdSubjectsSubjectIdObservationGetRaw(requestParameters: IndexSpacesSpaceIdSubjectsSubjectIdObservationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PerformedObservation>>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling indexSpacesSpaceIdSubjectsSubjectIdObservationGet().'
            );
        }

        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling indexSpacesSpaceIdSubjectsSubjectIdObservationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/spaces/{space_id}/subjects/{subject_id}/observation`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));
        urlPath = urlPath.replace(`{${"subject_id"}}`, encodeURIComponent(String(requestParameters['subjectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PerformedObservationFromJSON));
    }

    /**
     * Index
     */
    async indexSpacesSpaceIdSubjectsSubjectIdObservationGet(requestParameters: IndexSpacesSpaceIdSubjectsSubjectIdObservationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PerformedObservation>> {
        const response = await this.indexSpacesSpaceIdSubjectsSubjectIdObservationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGetRaw(requestParameters: IndexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PerformedObservationResult>>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling indexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGet().'
            );
        }

        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling indexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGet().'
            );
        }

        if (requestParameters['obsId'] == null) {
            throw new runtime.RequiredError(
                'obsId',
                'Required parameter "obsId" was null or undefined when calling indexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/spaces/{space_id}/subjects/{subject_id}/observation/{obs_id}/result`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));
        urlPath = urlPath.replace(`{${"subject_id"}}`, encodeURIComponent(String(requestParameters['subjectId'])));
        urlPath = urlPath.replace(`{${"obs_id"}}`, encodeURIComponent(String(requestParameters['obsId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PerformedObservationResultFromJSON));
    }

    /**
     * Index
     */
    async indexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGet(requestParameters: IndexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PerformedObservationResult>> {
        const response = await this.indexSpacesSpaceIdSubjectsSubjectIdObservationObsIdResultGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show
     */
    async showSpacesSpaceIdSubjectsSubjectIdObservationObsIdGetRaw(requestParameters: ShowSpacesSpaceIdSubjectsSubjectIdObservationObsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PerformedObservation>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling showSpacesSpaceIdSubjectsSubjectIdObservationObsIdGet().'
            );
        }

        if (requestParameters['subjectId'] == null) {
            throw new runtime.RequiredError(
                'subjectId',
                'Required parameter "subjectId" was null or undefined when calling showSpacesSpaceIdSubjectsSubjectIdObservationObsIdGet().'
            );
        }

        if (requestParameters['obsId'] == null) {
            throw new runtime.RequiredError(
                'obsId',
                'Required parameter "obsId" was null or undefined when calling showSpacesSpaceIdSubjectsSubjectIdObservationObsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/spaces/{space_id}/subjects/{subject_id}/observation/{obs_id}`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));
        urlPath = urlPath.replace(`{${"subject_id"}}`, encodeURIComponent(String(requestParameters['subjectId'])));
        urlPath = urlPath.replace(`{${"obs_id"}}`, encodeURIComponent(String(requestParameters['obsId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformedObservationFromJSON(jsonValue));
    }

    /**
     * Show
     */
    async showSpacesSpaceIdSubjectsSubjectIdObservationObsIdGet(requestParameters: ShowSpacesSpaceIdSubjectsSubjectIdObservationObsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PerformedObservation> {
        const response = await this.showSpacesSpaceIdSubjectsSubjectIdObservationObsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
