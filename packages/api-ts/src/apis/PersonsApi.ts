/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityName,
  EntityNameData,
  HTTPValidationError,
  PersonOutput,
  PostalAddress,
  PostalAddressData,
  TelecommunicationAddress,
  TelecommunicationAddressWithId,
} from '../models/index';
import {
    EntityNameFromJSON,
    EntityNameToJSON,
    EntityNameDataFromJSON,
    EntityNameDataToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PersonOutputFromJSON,
    PersonOutputToJSON,
    PostalAddressFromJSON,
    PostalAddressToJSON,
    PostalAddressDataFromJSON,
    PostalAddressDataToJSON,
    TelecommunicationAddressFromJSON,
    TelecommunicationAddressToJSON,
    TelecommunicationAddressWithIdFromJSON,
    TelecommunicationAddressWithIdToJSON,
} from '../models/index';

export interface CreatePersonsPersonIdNamesPostRequest {
    personId: string;
    entityNameData: EntityNameData;
}

export interface CreatePersonsPersonIdPostalAddressesPostRequest {
    personId: string;
    postalAddressData: PostalAddressData;
}

export interface CreatePersonsPersonIdTelecommunicationAddressesPostRequest {
    personId: string;
    telecommunicationAddress: TelecommunicationAddress;
}

export interface DeletePersonsPersonIdNamesNameIdDeleteRequest {
    personId: string;
    nameId: string;
}

export interface DeletePersonsPersonIdPostalAddressesAddressIdDeleteRequest {
    personId: string;
    addressId: string;
}

export interface DeletePersonsPersonIdTelecommunicationAddressesAddressIdDeleteRequest {
    personId: string;
    addressId: string;
}

export interface IndexPersonsPersonIdNamesGetRequest {
    personId: string;
}

export interface IndexPersonsPersonIdPostalAddressesGetRequest {
    personId: string;
}

export interface IndexPersonsPersonIdTelecommunicationAddressesGetRequest {
    personId: string;
}

export interface ShowPersonsPersonIdGetRequest {
    personId: string;
}

export interface UpdatePersonsPersonIdNamesNameIdPatchRequest {
    personId: string;
    nameId: string;
    entityNameData: EntityNameData;
}

export interface UpdatePersonsPersonIdPostalAddressesAddressIdPatchRequest {
    personId: string;
    addressId: string;
    postalAddressData: PostalAddressData;
}

export interface UpdatePersonsPersonIdTelecommunicationAddressesAddressIdPatchRequest {
    personId: string;
    addressId: string;
    telecommunicationAddress: TelecommunicationAddress;
}

/**
 * 
 */
export class PersonsApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async createPersonsPersonIdNamesPostRaw(requestParameters: CreatePersonsPersonIdNamesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityName>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling createPersonsPersonIdNamesPost().'
            );
        }

        if (requestParameters['entityNameData'] == null) {
            throw new runtime.RequiredError(
                'entityNameData',
                'Required parameter "entityNameData" was null or undefined when calling createPersonsPersonIdNamesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/names`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityNameDataToJSON(requestParameters['entityNameData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityNameFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createPersonsPersonIdNamesPost(requestParameters: CreatePersonsPersonIdNamesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityName> {
        const response = await this.createPersonsPersonIdNamesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async createPersonsPersonIdPostalAddressesPostRaw(requestParameters: CreatePersonsPersonIdPostalAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostalAddress>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling createPersonsPersonIdPostalAddressesPost().'
            );
        }

        if (requestParameters['postalAddressData'] == null) {
            throw new runtime.RequiredError(
                'postalAddressData',
                'Required parameter "postalAddressData" was null or undefined when calling createPersonsPersonIdPostalAddressesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/postal_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostalAddressDataToJSON(requestParameters['postalAddressData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostalAddressFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createPersonsPersonIdPostalAddressesPost(requestParameters: CreatePersonsPersonIdPostalAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostalAddress> {
        const response = await this.createPersonsPersonIdPostalAddressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async createPersonsPersonIdTelecommunicationAddressesPostRaw(requestParameters: CreatePersonsPersonIdTelecommunicationAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelecommunicationAddress>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling createPersonsPersonIdTelecommunicationAddressesPost().'
            );
        }

        if (requestParameters['telecommunicationAddress'] == null) {
            throw new runtime.RequiredError(
                'telecommunicationAddress',
                'Required parameter "telecommunicationAddress" was null or undefined when calling createPersonsPersonIdTelecommunicationAddressesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/telecommunication_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TelecommunicationAddressToJSON(requestParameters['telecommunicationAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelecommunicationAddressFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createPersonsPersonIdTelecommunicationAddressesPost(requestParameters: CreatePersonsPersonIdTelecommunicationAddressesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelecommunicationAddress> {
        const response = await this.createPersonsPersonIdTelecommunicationAddressesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deletePersonsPersonIdNamesNameIdDeleteRaw(requestParameters: DeletePersonsPersonIdNamesNameIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling deletePersonsPersonIdNamesNameIdDelete().'
            );
        }

        if (requestParameters['nameId'] == null) {
            throw new runtime.RequiredError(
                'nameId',
                'Required parameter "nameId" was null or undefined when calling deletePersonsPersonIdNamesNameIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/names/{name_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));
        urlPath = urlPath.replace(`{${"name_id"}}`, encodeURIComponent(String(requestParameters['nameId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete
     */
    async deletePersonsPersonIdNamesNameIdDelete(requestParameters: DeletePersonsPersonIdNamesNameIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePersonsPersonIdNamesNameIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deletePersonsPersonIdPostalAddressesAddressIdDeleteRaw(requestParameters: DeletePersonsPersonIdPostalAddressesAddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling deletePersonsPersonIdPostalAddressesAddressIdDelete().'
            );
        }

        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling deletePersonsPersonIdPostalAddressesAddressIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/postal_addresses/{address_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));
        urlPath = urlPath.replace(`{${"address_id"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete
     */
    async deletePersonsPersonIdPostalAddressesAddressIdDelete(requestParameters: DeletePersonsPersonIdPostalAddressesAddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePersonsPersonIdPostalAddressesAddressIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deletePersonsPersonIdTelecommunicationAddressesAddressIdDeleteRaw(requestParameters: DeletePersonsPersonIdTelecommunicationAddressesAddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling deletePersonsPersonIdTelecommunicationAddressesAddressIdDelete().'
            );
        }

        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling deletePersonsPersonIdTelecommunicationAddressesAddressIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/telecommunication_addresses/{address_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));
        urlPath = urlPath.replace(`{${"address_id"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete
     */
    async deletePersonsPersonIdTelecommunicationAddressesAddressIdDelete(requestParameters: DeletePersonsPersonIdTelecommunicationAddressesAddressIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePersonsPersonIdTelecommunicationAddressesAddressIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexPersonsPersonIdNamesGetRaw(requestParameters: IndexPersonsPersonIdNamesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EntityName>>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling indexPersonsPersonIdNamesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/names`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntityNameFromJSON));
    }

    /**
     * Index
     */
    async indexPersonsPersonIdNamesGet(requestParameters: IndexPersonsPersonIdNamesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EntityName>> {
        const response = await this.indexPersonsPersonIdNamesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexPersonsPersonIdPostalAddressesGetRaw(requestParameters: IndexPersonsPersonIdPostalAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostalAddress>>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling indexPersonsPersonIdPostalAddressesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/postal_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostalAddressFromJSON));
    }

    /**
     * Index
     */
    async indexPersonsPersonIdPostalAddressesGet(requestParameters: IndexPersonsPersonIdPostalAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostalAddress>> {
        const response = await this.indexPersonsPersonIdPostalAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexPersonsPersonIdTelecommunicationAddressesGetRaw(requestParameters: IndexPersonsPersonIdTelecommunicationAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TelecommunicationAddressWithId>>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling indexPersonsPersonIdTelecommunicationAddressesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}/telecommunication_addresses`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TelecommunicationAddressWithIdFromJSON));
    }

    /**
     * Index
     */
    async indexPersonsPersonIdTelecommunicationAddressesGet(requestParameters: IndexPersonsPersonIdTelecommunicationAddressesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TelecommunicationAddressWithId>> {
        const response = await this.indexPersonsPersonIdTelecommunicationAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show
     */
    async showPersonsPersonIdGetRaw(requestParameters: ShowPersonsPersonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonOutput>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling showPersonsPersonIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/persons/{person_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonOutputFromJSON(jsonValue));
    }

    /**
     * Show
     */
    async showPersonsPersonIdGet(requestParameters: ShowPersonsPersonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonOutput> {
        const response = await this.showPersonsPersonIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updatePersonsPersonIdNamesNameIdPatchRaw(requestParameters: UpdatePersonsPersonIdNamesNameIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityName>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling updatePersonsPersonIdNamesNameIdPatch().'
            );
        }

        if (requestParameters['nameId'] == null) {
            throw new runtime.RequiredError(
                'nameId',
                'Required parameter "nameId" was null or undefined when calling updatePersonsPersonIdNamesNameIdPatch().'
            );
        }

        if (requestParameters['entityNameData'] == null) {
            throw new runtime.RequiredError(
                'entityNameData',
                'Required parameter "entityNameData" was null or undefined when calling updatePersonsPersonIdNamesNameIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/names/{name_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));
        urlPath = urlPath.replace(`{${"name_id"}}`, encodeURIComponent(String(requestParameters['nameId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EntityNameDataToJSON(requestParameters['entityNameData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityNameFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updatePersonsPersonIdNamesNameIdPatch(requestParameters: UpdatePersonsPersonIdNamesNameIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityName> {
        const response = await this.updatePersonsPersonIdNamesNameIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updatePersonsPersonIdPostalAddressesAddressIdPatchRaw(requestParameters: UpdatePersonsPersonIdPostalAddressesAddressIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostalAddress>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling updatePersonsPersonIdPostalAddressesAddressIdPatch().'
            );
        }

        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling updatePersonsPersonIdPostalAddressesAddressIdPatch().'
            );
        }

        if (requestParameters['postalAddressData'] == null) {
            throw new runtime.RequiredError(
                'postalAddressData',
                'Required parameter "postalAddressData" was null or undefined when calling updatePersonsPersonIdPostalAddressesAddressIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/postal_addresses/{address_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));
        urlPath = urlPath.replace(`{${"address_id"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostalAddressDataToJSON(requestParameters['postalAddressData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostalAddressFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updatePersonsPersonIdPostalAddressesAddressIdPatch(requestParameters: UpdatePersonsPersonIdPostalAddressesAddressIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostalAddress> {
        const response = await this.updatePersonsPersonIdPostalAddressesAddressIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updatePersonsPersonIdTelecommunicationAddressesAddressIdPatchRaw(requestParameters: UpdatePersonsPersonIdTelecommunicationAddressesAddressIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['personId'] == null) {
            throw new runtime.RequiredError(
                'personId',
                'Required parameter "personId" was null or undefined when calling updatePersonsPersonIdTelecommunicationAddressesAddressIdPatch().'
            );
        }

        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling updatePersonsPersonIdTelecommunicationAddressesAddressIdPatch().'
            );
        }

        if (requestParameters['telecommunicationAddress'] == null) {
            throw new runtime.RequiredError(
                'telecommunicationAddress',
                'Required parameter "telecommunicationAddress" was null or undefined when calling updatePersonsPersonIdTelecommunicationAddressesAddressIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/persons/{person_id}/telecommunication_addresses/{address_id}`;
        urlPath = urlPath.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters['personId'])));
        urlPath = urlPath.replace(`{${"address_id"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TelecommunicationAddressToJSON(requestParameters['telecommunicationAddress']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update
     */
    async updatePersonsPersonIdTelecommunicationAddressesAddressIdPatch(requestParameters: UpdatePersonsPersonIdTelecommunicationAddressesAddressIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updatePersonsPersonIdTelecommunicationAddressesAddressIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
