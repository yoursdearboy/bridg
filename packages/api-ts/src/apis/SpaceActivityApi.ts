/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefinedObservationResult,
  HTTPValidationError,
  StudyActivity,
} from '../models/index';
import {
    DefinedObservationResultFromJSON,
    DefinedObservationResultToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StudyActivityFromJSON,
    StudyActivityToJSON,
} from '../models/index';

export interface IndexSpacesSpaceIdActivityGetRequest {
    spaceId: string;
}

export interface IndexSpacesSpaceIdActivityObsIdResultGetRequest {
    spaceId: string;
    obsId: string;
}

/**
 * 
 */
export class SpaceActivityApi extends runtime.BaseAPI {

    /**
     * Index
     */
    async indexSpacesSpaceIdActivityGetRaw(requestParameters: IndexSpacesSpaceIdActivityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StudyActivity>>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling indexSpacesSpaceIdActivityGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{space_id}/activity`.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudyActivityFromJSON));
    }

    /**
     * Index
     */
    async indexSpacesSpaceIdActivityGet(requestParameters: IndexSpacesSpaceIdActivityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StudyActivity>> {
        const response = await this.indexSpacesSpaceIdActivityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index
     */
    async indexSpacesSpaceIdActivityObsIdResultGetRaw(requestParameters: IndexSpacesSpaceIdActivityObsIdResultGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DefinedObservationResult>>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling indexSpacesSpaceIdActivityObsIdResultGet().'
            );
        }

        if (requestParameters['obsId'] == null) {
            throw new runtime.RequiredError(
                'obsId',
                'Required parameter "obsId" was null or undefined when calling indexSpacesSpaceIdActivityObsIdResultGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spaces/{space_id}/activity/{obs_id}/result`.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId']))).replace(`{${"obs_id"}}`, encodeURIComponent(String(requestParameters['obsId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DefinedObservationResultFromJSON));
    }

    /**
     * Index
     */
    async indexSpacesSpaceIdActivityObsIdResultGet(requestParameters: IndexSpacesSpaceIdActivityObsIdResultGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DefinedObservationResult>> {
        const response = await this.indexSpacesSpaceIdActivityObsIdResultGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
