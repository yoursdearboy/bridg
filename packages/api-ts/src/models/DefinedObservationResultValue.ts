/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CharacterString } from "./CharacterString";
import {
  instanceOfCharacterString,
  CharacterStringFromJSON,
  CharacterStringFromJSONTyped,
  CharacterStringToJSON,
} from "./CharacterString";
import type { CodedSimpleValue } from "./CodedSimpleValue";
import {
  instanceOfCodedSimpleValue,
  CodedSimpleValueFromJSON,
  CodedSimpleValueFromJSONTyped,
  CodedSimpleValueToJSON,
} from "./CodedSimpleValue";
import type { CodedValue } from "./CodedValue";
import {
  instanceOfCodedValue,
  CodedValueFromJSON,
  CodedValueFromJSONTyped,
  CodedValueToJSON,
} from "./CodedValue";
import type { ConceptDescriptor } from "./ConceptDescriptor";
import {
  instanceOfConceptDescriptor,
  ConceptDescriptorFromJSON,
  ConceptDescriptorFromJSONTyped,
  ConceptDescriptorToJSON,
} from "./ConceptDescriptor";
import type { DataValue } from "./DataValue";
import {
  instanceOfDataValue,
  DataValueFromJSON,
  DataValueFromJSONTyped,
  DataValueToJSON,
} from "./DataValue";
import {
  DateTimeFromJSONTyped,
  DateTimeToJSON,
  type DateTime,
} from "./DateTime";
import type { EncapsulatedData } from "./EncapsulatedData";
import {
  instanceOfEncapsulatedData,
  EncapsulatedDataFromJSON,
  EncapsulatedDataFromJSONTyped,
  EncapsulatedDataToJSON,
} from "./EncapsulatedData";
import type { IntegerNumber } from "./IntegerNumber";
import {
  instanceOfIntegerNumber,
  IntegerNumberFromJSON,
  IntegerNumberFromJSONTyped,
  IntegerNumberToJSON,
} from "./IntegerNumber";
import type { ModelDate } from "./ModelDate";
import {
  instanceOfModelDate,
  ModelDateFromJSON,
  ModelDateFromJSONTyped,
  ModelDateToJSON,
} from "./ModelDate";
import type { PhysicalQuantity } from "./PhysicalQuantity";
import {
  instanceOfPhysicalQuantity,
  PhysicalQuantityFromJSON,
  PhysicalQuantityFromJSONTyped,
  PhysicalQuantityToJSON,
} from "./PhysicalQuantity";
import type { PointInTime } from "./PointInTime";
import {
  instanceOfPointInTime,
  PointInTimeFromJSON,
  PointInTimeFromJSONTyped,
  PointInTimeToJSON,
} from "./PointInTime";
import type { Quantity } from "./Quantity";
import {
  instanceOfQuantity,
  QuantityFromJSON,
  QuantityFromJSONTyped,
  QuantityToJSON,
} from "./Quantity";
import type { RealNumber } from "./RealNumber";
import {
  instanceOfRealNumber,
  RealNumberFromJSON,
  RealNumberFromJSONTyped,
  RealNumberToJSON,
} from "./RealNumber";
import type { StringNoTranslations } from "./StringNoTranslations";
import {
  instanceOfStringNoTranslations,
  StringNoTranslationsFromJSON,
  StringNoTranslationsFromJSONTyped,
  StringNoTranslationsToJSON,
} from "./StringNoTranslations";
import type { StringSimple } from "./StringSimple";
import {
  instanceOfStringSimple,
  StringSimpleFromJSON,
  StringSimpleFromJSONTyped,
  StringSimpleToJSON,
} from "./StringSimple";
import type { ZeroedQuantity } from "./ZeroedQuantity";
import {
  instanceOfZeroedQuantity,
  ZeroedQuantityFromJSON,
  ZeroedQuantityFromJSONTyped,
  ZeroedQuantityToJSON,
} from "./ZeroedQuantity";

/**
 * @type DefinedObservationResultValue
 *
 * @export
 */
export type DefinedObservationResultValue =
  | ({ dataType: "ANY" } & DataValue)
  | ({ dataType: "CD" } & ConceptDescriptor)
  | ({ dataType: "CS" } & CodedSimpleValue)
  | ({ dataType: "CV" } & CodedValue)
  | ({ dataType: "ED" } & EncapsulatedData)
  | ({ dataType: "INT" } & IntegerNumber)
  | ({ dataType: "PQ" } & PhysicalQuantity)
  | ({ dataType: "QTY" } & Quantity)
  | ({ dataType: "QTZ" } & ZeroedQuantity)
  | ({ dataType: "REAL" } & RealNumber)
  | ({ dataType: "ST" } & CharacterString)
  | ({ dataType: "ST.NT" } & StringNoTranslations)
  | ({ dataType: "ST.SIMPLE" } & StringSimple)
  | ({ dataType: "TS" } & PointInTime)
  | ({ dataType: "TS.DATE" } & ModelDate)
  | ({ dataType: "TS.DATETIME" } & DateTime);

export function DefinedObservationResultValueFromJSON(
  json: any
): DefinedObservationResultValue {
  return DefinedObservationResultValueFromJSONTyped(json, false);
}

export function DefinedObservationResultValueFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DefinedObservationResultValue {
  if (json == null) {
    return json;
  }
  switch (json["data_type"]) {
    case "ANY":
      return Object.assign({}, DataValueFromJSONTyped(json, true), {
        dataType: "ANY",
      } as const);
    case "CD":
      return Object.assign({}, ConceptDescriptorFromJSONTyped(json, true), {
        dataType: "CD",
      } as const);
    case "CS":
      return Object.assign({}, CodedSimpleValueFromJSONTyped(json, true), {
        dataType: "CS",
      } as const);
    case "CV":
      return Object.assign({}, CodedValueFromJSONTyped(json, true), {
        dataType: "CV",
      } as const);
    case "ED":
      return Object.assign({}, EncapsulatedDataFromJSONTyped(json, true), {
        dataType: "ED",
      } as const);
    case "INT":
      return Object.assign({}, IntegerNumberFromJSONTyped(json, true), {
        dataType: "INT",
      } as const);
    case "PQ":
      return Object.assign({}, PhysicalQuantityFromJSONTyped(json, true), {
        dataType: "PQ",
      } as const);
    case "QTY":
      return Object.assign({}, QuantityFromJSONTyped(json, true), {
        dataType: "QTY",
      } as const);
    case "QTZ":
      return Object.assign({}, ZeroedQuantityFromJSONTyped(json, true), {
        dataType: "QTZ",
      } as const);
    case "REAL":
      return Object.assign({}, RealNumberFromJSONTyped(json, true), {
        dataType: "REAL",
      } as const);
    case "ST":
      return Object.assign({}, CharacterStringFromJSONTyped(json, true), {
        dataType: "ST",
      } as const);
    case "ST.NT":
      return Object.assign({}, StringNoTranslationsFromJSONTyped(json, true), {
        dataType: "ST.NT",
      } as const);
    case "ST.SIMPLE":
      return Object.assign({}, StringSimpleFromJSONTyped(json, true), {
        dataType: "ST.SIMPLE",
      } as const);
    case "TS":
      return Object.assign({}, PointInTimeFromJSONTyped(json, true), {
        dataType: "TS",
      } as const);
    case "TS.DATE":
      return Object.assign({}, ModelDateFromJSONTyped(json, true), {
        dataType: "TS.DATE",
      } as const);
    case "TS.DATETIME":
      return Object.assign({}, DateTimeFromJSONTyped(json, true), {
        dataType: "TS.DATETIME",
      } as const);
    default:
      return json;
  }
}

export function DefinedObservationResultValueToJSON(json: any): any {
  return DefinedObservationResultValueToJSONTyped(json, false);
}

export function DefinedObservationResultValueToJSONTyped(
  value?: DefinedObservationResultValue | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }
  switch (value["dataType"]) {
    case "ANY":
      return Object.assign({}, DataValueToJSON(value), {
        dataType: "ANY",
      } as const);
    case "CD":
      return Object.assign({}, ConceptDescriptorToJSON(value), {
        dataType: "CD",
      } as const);
    case "CS":
      return Object.assign({}, CodedSimpleValueToJSON(value), {
        dataType: "CS",
      } as const);
    case "CV":
      return Object.assign({}, CodedValueToJSON(value), {
        dataType: "CV",
      } as const);
    case "ED":
      return Object.assign({}, EncapsulatedDataToJSON(value), {
        dataType: "ED",
      } as const);
    case "INT":
      return Object.assign({}, IntegerNumberToJSON(value), {
        dataType: "INT",
      } as const);
    case "PQ":
      return Object.assign({}, PhysicalQuantityToJSON(value), {
        dataType: "PQ",
      } as const);
    case "QTY":
      return Object.assign({}, QuantityToJSON(value), {
        dataType: "QTY",
      } as const);
    case "QTZ":
      return Object.assign({}, ZeroedQuantityToJSON(value), {
        dataType: "QTZ",
      } as const);
    case "REAL":
      return Object.assign({}, RealNumberToJSON(value), {
        dataType: "REAL",
      } as const);
    case "ST":
      return Object.assign({}, CharacterStringToJSON(value), {
        dataType: "ST",
      } as const);
    case "ST.NT":
      return Object.assign({}, StringNoTranslationsToJSON(value), {
        dataType: "ST.NT",
      } as const);
    case "ST.SIMPLE":
      return Object.assign({}, StringSimpleToJSON(value), {
        dataType: "ST.SIMPLE",
      } as const);
    case "TS":
      return Object.assign({}, PointInTimeToJSON(value), {
        dataType: "TS",
      } as const);
    case "TS.DATE":
      return Object.assign({}, ModelDateToJSON(value), {
        dataType: "TS.DATE",
      } as const);
    case "TS.DATETIME":
      return Object.assign({}, DateTimeToJSON(value), {
        dataType: "TS.DATETIME",
      } as const);
    default:
      return value;
  }
}
