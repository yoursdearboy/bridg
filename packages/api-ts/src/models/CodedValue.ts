/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CodedValue
 */
export interface CodedValue {
    /**
     * 
     * @type {string}
     * @memberof CodedValue
     */
    dataType?: CodedValueDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CodedValue
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof CodedValue
     */
    codeSystem: string;
    /**
     * 
     * @type {string}
     * @memberof CodedValue
     */
    displayName: string | null;
}


/**
 * @export
 */
export const CodedValueDataTypeEnum = {
    Cv: 'CV'
} as const;
export type CodedValueDataTypeEnum = typeof CodedValueDataTypeEnum[keyof typeof CodedValueDataTypeEnum];


/**
 * Check if a given object implements the CodedValue interface.
 */
export function instanceOfCodedValue(value: object): value is CodedValue {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('codeSystem' in value) || value['codeSystem'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    return true;
}

export function CodedValueFromJSON(json: any): CodedValue {
    return CodedValueFromJSONTyped(json, false);
}

export function CodedValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): CodedValue {
    if (json == null) {
        return json;
    }
    return {
        
        'dataType': json['data_type'] == null ? undefined : json['data_type'],
        'code': json['code'],
        'codeSystem': json['code_system'],
        'displayName': json['display_name'],
    };
}

export function CodedValueToJSON(json: any): CodedValue {
    return CodedValueToJSONTyped(json, false);
}

export function CodedValueToJSONTyped(value?: CodedValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data_type': value['dataType'],
        'code': value['code'],
        'code_system': value['codeSystem'],
        'display_name': value['displayName'],
    };
}

