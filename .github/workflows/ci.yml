telegram-env: &telegram-env
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

telergam-base-job: &telergam-base-job
  run: |
    # Construct message
    MESSAGE=$(cat <<EOF
    ${STATUS_EMOJI} GitHub Actions CI Report ${STATUS_EMOJI}

    Repository: ${{ github.repository }}
    Workflow: ${{ github.workflow }}
    Status: ${STATUS_TEXT}
    
    Commit: ${{ github.sha }}
    Branch: ${{ github.ref_name }}
    Author: ${{ github.actor }}

    Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    EOF
    )

    # URL encode the message
    ENCODED_MESSAGE=$(printf '%s' "$MESSAGE" | jq -sRr @uri)

    # Send message via Telegram Bot API
    TELEGRAM_API_URL="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
    
    RESPONSE=$(curl -s -X POST "$TELEGRAM_API_URL" \
      -d "chat_id=${TELEGRAM_CHAT_ID}" \
      -d "text=${ENCODED_MESSAGE}")

    # Check if message was sent successfully
    if echo "$RESPONSE" | grep -q '"ok":true'; then
      echo "Telegram notification sent successfully"
    else
      echo "Failed to send Telegram notification"
      echo "$RESPONSE"
      exit 1
    fi

telegram-success: &telegram-success
  env:
    <<: *telegram-env
    STATUS_EMOJI: "✅"
    STATUS_TEXT: "Succeeded"
  <<: *telegram-base-job

telegram-failure: &telegram-failure
  env:
    <<: *telegram-env
    STATUS_EMOJI: "❌"
    STATUS_TEXT: "Failed"
  <<: *telegram-base-job

name: BRIDG CI

on:
  push:
    branches: [ main, api, telegram_notify ]
  pull_request:
    branches: [ main, api, telegram_notify ]

jobs:
  linter-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui

    strategy:
      matrix:
        node-version: [ 22.17.x ]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Link API client
      run: npm link ../api-ts

    - name: Run linter
      run: npm run lint
        # Telegram Notification Step
    - name: Send Telegram Notification
      uses: ./.github/workflows/telegram-notification.yml  
      if: always()
      with:
        working_directory: './ui'
      secrets:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        STATUS_TEXT:  ${{ steps.linter-tests.outcome == 'success' && 'success' || 'failure' }}
        STATUS_EMOJI: ${{ steps.linter-tests.outcome == 'success' && '✅' || '❌' }}
        STAGE_NAME: "LINTER"

  ui-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui

    strategy:
      matrix:
        node-version: [ 22.17.x ]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Link API client
      run: npm link ../api-ts

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm test

    # Telegram Notification Step
    - name: Send Telegram Notification
      uses: ./.github/workflows/telegram-notification.yml  
      if: always()
      with:
        working_directory: './ui'
      secrets:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        STATUS_TEXT:  ${{ steps.ui-tests.outcome == 'success' && 'success' || 'failure' }}
        STATUS_EMOJI: ${{ steps.ui-tests.outcome == 'success' && '✅' || '❌' }}
        STAGE_NAME: "UI"
